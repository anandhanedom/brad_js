**************** CHAPTER 1 ****************

* if/else statements allow you to make decisions in your code.

* while/for statements allow you to execute code many times by looping.

**************** CHAPTER 2 ****************

*  Math.random() => 0 to 0.99
*  Math.random() * 5 => 0 to 4.99

**************** CHAPTER 3 ****************

* JavaScript is 'pass-by-value'.

* #1: what happens when we don’t pass enough arguments? Undefined for missing args.
  #2: what happens when we pass too many argments? Extra args ignored.
  #3: what happens when we have NO parameters? No worries.

* If a variable is declared outside a function, it’s 'GLOBAL'.
  If it’s declared inside a function, it’s 'LOCAL'.
  'GLOBAL' can be shadowed by 'LOCAL'.

**************** CHAPTER 4 ****************

* Assigning a value to an item that doesn’t exist in the array will create a new
  item in the array.

* The 'while' loop is most often used when you don’t know how many times you need
  to loop, and you’re looping until a condition is met. 
  
* The 'for' loop is most often used when you know the number of times the loop needs
  to execute. 

**************** CHAPTER 5 ****************

* To delete a property: 'delete'. Eg. delete person.name

* A 'primitive variable' represents the actual value of the variable while an 'object  
  variable' represents a way to get to the object.

* If you change a property of the object in a function, you’re changing the property
  in the original object.

* You can think of 'this' like a variable that is assigned to the object whose method was just called.

* Looping through an object: for (var prop in chevy) {
 console.log(prop + ": " + chevy[prop]);
}

**************** CHAPTER 6 ****************

* window.onload=init; //On load call back
 
* You can get the value of an element’s attributes using the getAttribute method.
  --planet.setAttribute("class", "redtext");

* You can set the value of an element’s attributes using the setAttribute method.
  --scoop.getAttribute("alt");  

**************** CHAPTER 7 ****************

* typeof is an opertor.

* typeof [] is "object".

* typeof null = object. typeof undefined = undefined. typeof NaN=number. 

* 0/0 is NaN. 100/0 is Infinity. typeof Infinity=number.

* NaN != NaN. Use 'ifNaN()'.

* undefined = null.

* If you try to add a number and a string, JavaScript converts the number to a string
  and concatenates the two.

* For arithmetic operators—like multiplication, division and subtraction—
  JS prefers to treat those as arithmetic operations, not string operations.

* 2 references are equal only if they reference the same object.

* Falsies: undefined,null,0,empty string,NaN. Every thing else is 'truthy'.

* String methods: 
    string.trim();
    string.toUpperCase(); 
    string.charAt(i); //i > length => " "
    string.indexOf(i); //nothing => -1
    string.lastIndexOf(i); //nothing => -1
    string.substring(i, j ) => i to j-1  ||  string.substring(i)
    string.split("|"); //an array of splits
  
* Checkout:substring,slice,toLowerCase,lastIndexOf,match,concat,toUpperCase,replace


**************** CHAPTER 8 ****************

* We organized the code using three objects: a model, a view, and a controller.
* Each object in the game has one primary responsibility. 

* The responsibility of the model is to store the state of the game and implement   
  logic that modifies that state.

* The responsibility of the view is to update the display when the state in the model 
  changes.

* The responsibility of the controller is to glue the game together, to make sure the 
  player’s guess is sent to the model to update the state, and to check to see when the game is complete.

**************** CHAPTER 9 ****************

* Callbacks disguised as 'HANDLERS'.

* Beware of setInterval & setTimeout. 

* onmousemove:  clientX, clientY,screenX, screenY,pageX, pageY

* Checkout : click,resize,play,pause,load,unload,dragstart,drop,mousemove,mouseover,
  keypress,mouseout,touchstart,touchend

**************** CHAPTER 10 ****************

* With a function expression, a function is created at runtime(execution).

* First class values can be passed,assigned or returned.

* The array sort method takes a function that knows how to compare two values in an 
  array.

* The function you pass to the sort method should return one of these values: a number 
  greater than 0, 0, or a number less than 0.

**************** CHAPTER 11 ****************

* We can place 'function declarations' anywhere in our code. Function expressions may 
  cause problems at times.

* A "function declaration" is defined before the rest of your code is evaluated.

* A "function expression" is evaluated at runtime with the rest of your code, and so is not defined until
  the statement in which it appears is evaluated.

* A free variable is one that isn't defined in the local scope.

* When we have an environment that has a value for each of the free variables, we say that we’ve
  closed the function. Here, fn + env = closure.  

* The environment references the live variables being used by your code, so if a value is changed by code outside your
  closure function, that new value is seen by your closure function when it is evaluated.

**************** CHAPTER 12 ****************

* every method

* instanceof

* When you use new with a constructor function call, it creates a new, empty object, which is assigned
  to this within the body of the constructor.

* If you change any property in the prototype, it affects all the objects that inherit from that prototype, unless that object has
  overridden that property. 

* obj.hasOwnProperty('sitting') //prototypal or own 